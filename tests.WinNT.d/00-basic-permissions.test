#!/bin/bash -x
#
# This next line adds this test to the "critical" set.  You can also use
# $Important to add it to the "important" set.
max_priority () {
    echo $Critical
}


# Args:
#   $1: a new directory where you should create your files
create () {
    cd $1
    
    touch owned-by-me
    chmod 1777 owned-by-me
    
    #touch owned-by-root
    #chown root:root owned-by-root
    
    touch owned-by-$USERNAME
    chown $USERNAME owned-by-hky
    
    mkdir some-dir
    chmod 1777 some-dir
    
}

# Args:
#   $1 & $2: Two files.  You should fail if the property of interest differs
#            between them.  For example, if you are testing permissions, 
#            compare should fail if the files have different permissions.
#
# Note: You should NOT assume that this file was produced by your create
#   function.  This should be a general test.  You should be able to handle
#   files that don't posess the property of interest at all without failing.
#   You should also do your best to only test a single property (or group
#   of properties) so that the meaning of a failure is clear.
compare () {
    test -e $1 \
    && test -e $2 \
    && test "`stat --format='%u:%g:%a' $1`" = "`stat --format='%u:%g:%a' $2`"
}

# Args:
#   $1: the copied directory
#   $2: the original directory (where create was run)
#
# This should fail if it detects that the copy was not faithful.
verify () {
    cd $1
    
    compare $1/owned-by-me $2/owned-by-me \
    && compare $1/owned-by-$USERNAME $2/owned-by-$USERNAME \
    && compare $1/some-dir $2/some-dir
#    && compare $1/owned-by-root $2/owned-by-root \
}

# Args: none
# Treating the working directory as though your create function had been 
# run there, perform any necessary operations to allow 'sudo rm -rf' to succeed.
# For example, unlock any locked files.
clean () { 
    true 
}
